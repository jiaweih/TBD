name: build
on: [push]
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: 3.6
    - name: Install dependencies
      run: python -m pip install .[main] --upgrade pip
    # - name: Create environment
    #   run: |
    #     wget -O miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    #     chmod +x miniconda.sh
    #     ./miniconda.sh -b
    #     export PATH=/home/runner/miniconda3/bin:$PATH
    #     conda update --yes conda
    #     conda env create --name tbdenv -f environment.yml
    #     conda info --envs      
    #     $CONDA/bin/activate tbdenv
    #     conda install --yes coverage coveralls flake8
    # - name: Activate environment
    # conda activate tbdenv
      # run: $CONDA/bin/conda init zsh
    # - name: Initialize shell
    #   run: $CONDA/bin/conda activate tbdenv

    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     python -m pip install --upgrade pre-commit
    #     pip install pipenv 
    #     pipenv sync
    #     pipenv sync --dev
    #     pipenv install -e .
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pipenv run pytest

    ### working
    # - name: Install packages
    #   run: python -m pip install .[dev] --upgrade pip
    # - name: Test with pytest
    #   run: pytest
    ### working
    # - name: Flake
    #   run: |
    #     pip install flake8
    #     flake8

    # - name: Build package distribution
    #   if: startsWith(github.ref, 'refs/tags')
    #   run: |
    #     python -m pip install build 
    #     python -m build --sdist --wheel --outdir dist/ .
    # - name: Publish package distribution to PyPI
    #   if: startsWith(github.ref, 'refs/tags')
    #   uses: pypa/gh-action-pypi-publish@master
    #   with:
    #     skip_existing: true
    #     user: __token__
    #     password: ${{ secrets.PYPI_API_TOKEN }}